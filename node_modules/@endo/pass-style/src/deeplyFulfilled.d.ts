export function deeplyFulfilled<T extends Passable = Passable>(val: T): Promise<DeeplyAwaited<T>>;
/**
 * flatten the
 * type output to improve type hints shown in editors
 * https://github.com/sindresorhus/type-fest/blob/main/source/simplify.d.ts
 */
export type Simplify<T> = { [KeyType in keyof T]: T[KeyType]; } & {};
/**
 * Currently copied from
 */
export type Callable = (...args: any[]) => any;
/**
 * Currently copied from
 */
export type DeeplyAwaitedObject<T extends {}> = { [K in keyof T]: T[K] extends Callable ? T[K] : DeeplyAwaited<T[K]>; };
/**
 * Currently copied from
 */
export type DeeplyAwaited<T> = T extends PromiseLike<any> ? Awaited<T> : T extends {} ? Simplify<DeeplyAwaitedObject<T>> : Awaited<T>;
import type { Passable } from '@endo/pass-style';
//# sourceMappingURL=deeplyFulfilled.d.ts.map